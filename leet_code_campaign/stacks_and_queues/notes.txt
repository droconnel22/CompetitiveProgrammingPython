Stacks

A linear data structure which as the order of 

LIFO

Last In First Out

Think of a stack of plates

The bottom plate remains in the stack the longest.

Time Complexity

Pop, Push top -> O(1)


---

Queues

A linear data structure which has the order oof

FIFO

First In First Out

Think of a line of people waiting in line to a concert

The first to arrive will be taken first

The last to arrive will be taken last


The queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. The Queue class in this module implements all the required locking semantics.

list.pop([i])
Remove the item at the given position in the list, and return it. 

>>> If no index is specified, a.pop() removes and returns the last item in 
the list. <<<
(The square brackets around the i in the method signature 
denote that the parameter is optional, 
not that you should type square brackets at that position.

 You will see this notation frequently in the Python Library Reference.)


 5.1.1. Using Lists as Stacks
The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index. For example:

>>>
>>> stack = [3, 4, 5]
>>> stack.append(6)
>>> stack.append(7)
>>> stack
[3, 4, 5, 6, 7]

[7] <-- first to be popped from stack .pop()
[6]
[5]
[4]
[3] 

>>> stack.pop()
7
>>> stack
[3, 4, 5, 6]
>>> stack.pop()
6
>>> stack.pop()
5
>>> stack
[3, 4]

5.1.2. Using Lists as Queues
It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).

To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. For example:

>>>
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves
'Eric'
>>> queue.popleft()                 # The second to arrive now leaves
'John'
>>> queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])